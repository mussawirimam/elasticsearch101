NOTE: explicit mapping over rides the dynamic mapping 
Dynamic Mapping
----------------
Automatically add new fields and data types.
1) New fields not already in the index will be added automatically.
2) Data detectors will automatically determine data types for new fields.
3) Dynamic templates allow for the customization of dynamic mapping behavior.

  So we can automatically add new fields
and assign their data types in Elasticsearch
with dynamic mapping enabled, which is the default.

  So fields that are not already in an index,
when you go to index them, it will be added automatically.
So the mapping for that field, we automatically add it.
And the way it will do that is to try to determine,
with data detectors, what the data type should be.
So it will automatically determine if it's a date,
or a string, or a number, if it's a float or an integer.
So Elasticsearch does have some really good
built-in logic to figure out what kind of data type
it should be. Now, all of that is well and good,
but a lot of times you're going to want to
customize this behavior,
which is possible with dynamic templates.
So we can actually customize the dynamic mapping behavior
explicitly with dynamic templates.

Explicit Mapping example for comparison:
-------------------------
GET _component_template/product_review_mappings

{
  "component_templates" : [
    {
      "name" : "product_review_mappings",
      "component_template" : {
        "template" : {
          "mappings" : {
            "properties" : {
              "reviews" : {
                "properties" : {
                  "review" : {
                    "analyzer" : "english",
                    "type" : "text"
                  },
                  "last_name" : {
                    "type" : "keyword"
                  },
                  "first_name" : {
                    "type" : "keyword"
                  }
                }
              },
              "product_id" : {
                "type" : "long"
              }
            }
          }
        }
      }
    }
  ]
}
-------------------------
  Let's go ahead and create another component template here
to define some dynamic mapping.
So we'll do a component template, and let's see,
let's do a dynamic mapping that converts integers to floats.
Maybe we have an index where the,
sometimes we're indexing a whole number
and the data detector is going to see that
and try to index it as an integer.
Whereas in reality, we want it to be a float,
because maybe we're doing averages or something,
some sort of aggregation on that data,
and we want it to be able to have decimal values.

  by default, Elasticsearch is going to
index integers as longs and floats as doubles,
that way you can allocate larger numbers.
So we're going to look for the type long.
So these are integers.
And then we're going to define their mapping
as a type double, which is a float.

Dynamic mapping:

PUT _component_template/integers_as_floats    <---------<< integers as floats. All right, so that's the name of our component template here.
{
  "template": {
    "mappings": {    <---------<< go ahead and define under template, mappings, but now this time, instead of defining the properties of our mapping, so that's where we would put our explicit mappings, we're going to define dynamic templates.
      "dynamic_templates": [    <----------<<   we're going to define dynamic templates.  this is going to be an array of objects. We'll do an array here. So you can have as many templates as you like.
        {
          "integers_as_floats": {     <---------<<  we'll go ahead and specify our dynamic template here integer, integers as floats.
            "match_mapping_type": "long",    <---------<< we need to specify the mapping type that we want to catch. So we'll do a match mapping type. So you want to look for type long. So by default, Elasticsearch is going to index integers as longs and floats as doubles, that way you can allocate larger numbers. So we're going to look for the type long. So these are integers.
            "mapping": {    <-------<< then we're going to define their mapping as a type double, which is a float.
              "type": "double" 
            }
          }
        }
      ]
    }
  }
}
--------------------
CONSOLE OUTPUT
--------------------
{
  "acknowledged" : true
}

--------------------
CONSOLE OUTPUT ENDS
--------------------
GET _component_template/integer_as_floats
--------------------
CONSOLE OUTPUT
--------------------
  So now, if we have an index where this component template
is composing the index, whenever we ingest a integer,
and we don't already have a field for that integer.
So, it's worth mentioning that explicit mappings
override dynamic mappings.
All right, so if I have something specified down here
as an integer, as a type long,
and I also have this dynamic template in that same index,
then that number will still be indexed as a type long,
because the explicit mappings override dynamic mappings.
Dynamic mappings only take effect when you have a new field
that doesn't already have a mapping
and there's no explicit mapping for it,
and it matches the behavior outlined here.
So it is a type of long,
then it will be ingested as a double.

{
  "component_templates" : [
    {
      "name" : "integer_as_floats",
      "component_template" : {
        "template" : {
          "mappings" : {
            "dynamic_templates" : [
              {
                "integers_as_floats" : {
                  "mapping" : {
                    "type" : "double"
                  },
                  "match_mapping_type" : "long"
                }
              }
            ]
          }
        }
      }
    }
  ]
}

--------------------
CONSOLE OUTPUT ENDS
--------------------

--------------------
CONSOLE OUTPUT
--------------------
--------------------
CONSOLE OUTPUT ENDS
--------------------

--------------------
CONSOLE OUTPUT
--------------------
--------------------
CONSOLE OUTPUT ENDS
--------------------
